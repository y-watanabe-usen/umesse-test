name: prod-deploy

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+'

jobs:
#  terraform:
#    name: Terraform
#    runs-on: ubuntu-latest
#
#    defaults:
#      run:
#        shell: bash
#
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v2
#
#    - name: configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ap-northeast-1
#
#    - name: Setup Nodejs
#      uses: actions/setup-node@v2
#      with:
#        node-version: '14'
#
#    - name: Build Lambda Api
#      working-directory: ./develop/lambda/api
#      run: |
#        npm install --production
#    - name: Build Lambda Converter
#      working-directory: ./develop/lambda/converter
#      run: |
#        npm install --production
#    - name: Build Lambda Generate
#      working-directory: ./develop/lambda/generate
#      run: |
#        npm install --production
#    - name: Build Lambda Sync
#      working-directory: ./develop/lambda/sync
#      run: |
#        npm install --production
#    - name: Build Lambda Lib
#      working-directory: ./develop/lambda/layer/nodejs/node_modules/umesse-lib
#      run: |
#        npm install --production
#    - name: Setup Terraform
#      uses: hashicorp/setup-terraform@v1
#      with:
#        terraform_version: 0.14.7
#
#    - name: Terraform apply
#      working-directory: ./deploy/aws
#      run: |
#        terraform init
#        terraform validate
#        terraform plan
#        terraform apply -auto-approve

  webapp:
    name: Webapp
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup Nodejs
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Build Webapp & Upload s3
      working-directory: ./develop/webapp
      run: |
        yarn install
        yarn build --mode production
        aws s3 sync --exact-timestamps --delete ./dist/ s3://umesse-webapp/

  api:
    name: Api
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup variables
      id: variables
      run: echo "::set-output name=version::${GITHUB_REF##*/}"

    - name: Api Lambda Function create version & Alias update version
      run: |
        aws lambda update-function-configuration --function-name $FunctionName --environment Variables='{environment=prod,debug=true,GENERATE_SQS_QUEUE_URL=https://sqs.ap-northeast-1.amazonaws.com/527816979470/UMesseGenerateQueueProd,CONVERTER_SQS_QUEUE_URL=https://sqs.ap-northeast-1.amazonaws.com/527816979470/UMesseConverterQueueProd}'
        Version=$(aws lambda publish-version --function-name $FunctionName --description '${{ steps.variables.outputs.version }}' | jq -r '.Version')
        aws lambda update-function-configuration --function-name $FunctionName --environment Variables='{environment=dev,debug=true,GENERATE_SQS_QUEUE_URL=https://sqs.ap-northeast-1.amazonaws.com/527816979470/UMesseGenerateQueueDev,CONVERTER_SQS_QUEUE_URL=https://sqs.ap-northeast-1.amazonaws.com/527816979470/UMesseConverterQueueDev}'
        aws lambda update-alias --function-name $FunctionName --name $AliasName --function-version $Version
      env:
        FunctionName: UMesseApiFunction
        AliasName: Prod

    - name: Converter Lambda Function create version & Alias update version
      run: |
        aws lambda update-function-configuration --function-name $FunctionName --environment Variables='{environment=prod,debug=true}'
        Version=$(aws lambda publish-version --function-name $FunctionName --description '${{ steps.variables.outputs.version }}' | jq -r '.Version')
        aws lambda update-function-configuration --function-name $FunctionName --environment Variables='{environment=dev,debug=true}'
        aws lambda update-alias --function-name $FunctionName --name $AliasName --function-version $Version
      env:
        FunctionName: UMesseConverterFunction
        AliasName: Prod

    - name: Generate Lambda Function create version & Alias update version
      run: |
        aws lambda update-function-configuration --function-name $FunctionName --environment Variables='{environment=prod,debug=true}'
        Version=$(aws lambda publish-version --function-name $FunctionName --description '${{ steps.variables.outputs.version }}' | jq -r '.Version')
        aws lambda update-function-configuration --function-name $FunctionName --environment Variables='{environment=dev,debug=true}'
        aws lambda update-alias --function-name $FunctionName --name $AliasName --function-version $Version
      env:
        FunctionName: UMesseGenerateFunction
        AliasName: Prod

    - name: Sync Lambda Function create version & Alias update version
      run: |
        aws lambda update-function-configuration --function-name $FunctionName --environment Variables='{environment=prod,debug=true}'
        Version=$(aws lambda publish-version --function-name $FunctionName --description '${{ steps.variables.outputs.version }}' | jq -r '.Version')
        aws lambda update-function-configuration --function-name $FunctionName --environment Variables='{environment=dev,debug=true}'
        aws lambda update-alias --function-name $FunctionName --name $AliasName --function-version $Version
      env:
        FunctionName: UMesseSyncFunction
        AliasName: Prod

  twa:
    name: Twa
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup JDK
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build Twa
      working-directory: ./develop/twa
      run: |
        ./gradlew assembleProdRelease

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: app-prod-release.apk
        path: ./develop/twa/app/build/outputs/apk/prod/release/app-prod-release.apk
        retention-days: 3
