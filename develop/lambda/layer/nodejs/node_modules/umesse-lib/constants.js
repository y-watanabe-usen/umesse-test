"use strict";

const { randomBytes } = require("crypto");

exports.constants = Object.freeze({
  region: "ap-northeast-1",
  debug: process.env.debug,
  environment: process.env.environment,

  // S3 設定
  s3Config: function () {
    switch (this.environment) {
      case "local":
        return {
          region: this.region,
          endpoint: "http://localhost:4566",
          signatureVersion: "v4",
          s3ForcePathStyle: "true", // local only
        };
      case "localstack":
        return {
          region: this.region,
          endpoint: "http://host.docker.internal:4566",
          signatureVersion: "v4",
          s3ForcePathStyle: "true", // local only
        };
      case "dev":
      case "stg":
      case "prod":
      default:
        return {
          region: this.region,
          signatureVersion: "v4",
        };
    }
  },

  // S3 バケット
  s3Bucket: function () {
    switch (this.environment) {
      case "local":
      case "localstack":
        return {
          users: "umesse-users",
          contents: "umesse-contents",
        };
      case "dev":
        return {
          users: "dev-umesse-users",
          contents: "dev-umesse-contents",
        };
      case "stg":
        return {
          users: "stg-umesse-users",
          contents: "stg-umesse-contents",
        };
      case "prod":
      default:
        return {
          users: "umesse-users",
          contents: "umesse-contents",
        };
    }
  },

  // DynamoDB 設定
  dynamoDbConfig: function () {
    switch (this.environment) {
      case "local":
        return {
          region: this.region,
          endpoint: "http://localhost:4566",
        };
      case "localstack":
        return {
          region: this.region,
          endpoint: "http://host.docker.internal:4566",
        };
      case "dev":
      case "stg":
      case "prod":
      default:
        return {
          region: this.region,
        };
    }
  },

  // DynamoDB テーブル
  dynamoDbTable: function () {
    switch (this.environment) {
      case "local":
      case "localstack":
        return {
          users: "umesse-users",
          contents: "umesse-contents",
          external: "umesse-external",
        };
      case "dev":
        return {
          users: "dev-umesse-users",
          contents: "dev-umesse-contents",
          external: "dev-umesse-external",
        };
      case "stg":
        return {
          users: "stg-umesse-users",
          contents: "stg-umesse-contents",
          external: "stg-umesse-external",
        };
      case "prod":
      default:
        return {
          users: "umesse-users",
          contents: "umesse-contents",
          external: "umesse-external",
        };
    }
  },

  // SQS 設定
  sqsConfig: function () {
    switch (this.environment) {
      case "local":
        return {
          region: this.region,
          endpoint: "http://localhost:4566",
        };
      case "localstack":
        return {
          region: this.region,
          endpoint: "http://host.docker.internal:4566",
        };
      case "dev":
      case "stg":
      case "prod":
      default:
        return {
          region: this.region,
        };
    }
  },

  // SQS QUEUE URL 設定
  sqsConverterQueueUrl: function () {
    switch (this.environment) {
      case "local":
      case "localstack":
        return "http://localhost:4566/000000000000/umesseConverterQueue";
      case "dev":
      case "stg":
      case "prod":
      default:
        return process.env.CONVERTER_SQS_QUEUE_URL;
    }
  },
  sqsGenerateQueueUrl: function () {
    switch (this.environment) {
      case "local":
      case "localstack":
        return "http://localhost:4566/000000000000/umesseGenerateQueue";
      case "dev":
      case "stg":
      case "prod":
      default:
        return process.env.GENERATE_SQS_QUEUE_URL;
    }
  },

  // TTS API 設定
  ttsApiConfig: function () {
    switch (this.environment) {
      case "local":
      case "localstack":
      case "dev":
      case "stg":
      case "prod":
      default:
        return {
          host: "api.voicetext.jp",
          path: "/v1/tts",
          key: "yck1tgf1x2jl3m51",
        };
    }
  },

  // UDS API 設定
  udsApiConfig: function () {
    switch (this.environment) {
      case "local":
      case "localstack":
        return {
          host: "",
          path: "",
          key: "",
        };
      case "dev":
      case "stg":
        return {
          host: "api-stg.uds.usen.co.jp",
          path: "/customerupd",
          key: "249xfG5Gd85r1gdU8loAGuySoK9Hjw36KfcTQbOi",
        };
      case "prod":
      default:
        return {
          host: "api.uds.usen.co.jp",
          path: "/customerupd",
          key: "G9EzmO2JC83TMrxUXtdIP9hghT9e6zB0aSZ0b2o9",
        };
    }
  },

  // 契約サービスコード
  targetServiceCd: ["U01", "U17"],

  // CMステータス
  cmStatus: {
    DELETE: "00", // CM削除(ユーザーミスによる復活のための定義)
    CREATING: "01", // CM作成中
    COMPLETE: "02", // CM作成完了
    CONVERT: "03", // CMエンコード中
    SHARING: "04", // CM共有中
    GENERATE: "05", // CM生成中
    ERROR: "09", // CMエラー
    EXTERNAL_UPLOADING: "11", // 外部システムアップロード中
    EXTERNAL_COMPLETE: "12", // 外部システムアップロード完了
    EXTERNAL_ERROR: "19", // 外部システムアップロードエラー
  },

  // CMタイプ
  cmProductionType: {
    MUSIC: "01", // 音楽系CM
    NONE: "02", // 素ナレCM（BGMなし）
  },

  // CMアップロードシステム区分
  cmUploadSystem: {
    CENTER: "01",
    SSENCE: "02",
  },

  // CMアップロードのプロセス
  cmDataProcessType: {
    ADD: "01",
    UPDATE: "02",
    DELETE: "03",
    ERROR: "09",
  },

  // コンテンツのカテゴリー
  resourceCategory: {
    CM: "cm",
    RECORDING: "recording",
    TTS: "tts",
    BGM: "bgm",
    CHIME: "chime",
    NARRATION: "narration",
    FREE: "free",
    TEMPLATE: "template",
    LANG: "lang",
  },

  // ソートパラメータ
  sort: {
    TITLE_ASC: 1,
    TITLE_DESC: 2,
    TIMESTAMP_ASC: 3,
    TIMESTAMP_DESC: 4,
  },

  // TTS話者
  ttsSpeakers: {
    ja: ["akira", "sayaka"],
    en: ["paul", "julie"],
    zh: ["qiang", "hong"],
    ko: ["jihun", "hyeryun"],
  },
});

// debug log
exports.debuglog = (message) => {
  if (this.constants.debug)
    console.debug(`[${this.constants.environment}]`, message);
};

// warn log
exports.warnlog = (message) => {
  console.warn(`[${this.constants.environment}]`, message);
};

// error log
exports.errorlog = (message) => {
  console.error(`[${this.constants.environment}]`, message);
};

// timestamp
exports.timestamp = () => {
  const time = new Date();
  time.setHours(time.getHours() + 9);
  return time.toISOString().split("Z")[0] + "+09:00";
};

// generate id cm (c), recording (r), tts (t)
exports.generateId = (unisCustomerCd, category) => {
  const id = randomBytes(8).reduce((p, i) => p + (i % 36).toString(36), "");
  return `${unisCustomerCd}-${category.slice(0, 1)}-${id}`;
};

// response data id sort
exports.responseData = (data, category, sort) => {
  if (!sort) sort = this.constants.sort.TITLE_ASC;
  if (Array.isArray(data)) {
    data.map((item) => this.convertId(item, category));
    return this.sortData(data, sort);
  } else {
    return this.convertId(data, category);
  }
};

exports.sortData = (data, sort) => {
  let sortFunc;
  switch (sort) {
    case this.constants.sort.TITLE_ASC:
      sortFunc = (a, b) => {
        if (a.title < b.title) return -1;
        if (a.title > b.title) return 1;
        return 0;
      };
      break;

    case this.constants.sort.TITLE_DESC:
      // titleの降順でソート
      sortFunc = (a, b) => {
        if (a.title > b.title) return -1;
        if (a.title < b.title) return 1;
        return 0;
      };
      break;

    case this.constants.sort.TIMESTAMP_ASC:
      sortFunc = (a, b) => {
        if (a.timestamp < b.timestamp) return -1;
        if (a.timestamp > b.timestamp) return 1;
        return 0;
      };
      break;

    case this.constants.sort.TIMESTAMP_DESC:
      sortFunc = (a, b) => {
        if (a.timestamp > b.timestamp) return -1;
        if (a.timestamp < b.timestamp) return 1;
        return 0;
      };
      break;

    default:
      // titleの昇順でソート
      sortFunc = (a, b) => {
        if (a.title < b.title) return -1;
        if (a.title > b.title) return 1;
        return 0;
      };
  }
  return data.sort(sortFunc);
};

exports.convertId = (data, category) => {
  switch (category) {
    case this.constants.resourceCategory.CM:
      if (!data.cmId) break;
      data.id = data.cmId;
      delete data.cmId;
      break;

    case this.constants.resourceCategory.RECORDING:
      if (!data.recordingId) break;
      data.id = data.recordingId;
      delete data.recordingId;
      break;

    case this.constants.resourceCategory.TTS:
      if (!data.ttsId) break;
      data.id = data.ttsId;
      delete data.ttsId;
      break;

    case this.constants.resourceCategory.BGM:
    case this.constants.resourceCategory.CHIME:
    case this.constants.resourceCategory.NARRATION:
    case this.constants.resourceCategory.FREE:
    case this.constants.resourceCategory.TEMPLATE:
      if (!data.contentsId) break;
      data.id = data.contentsId;
      delete data.contentsId;
      break;
  }
  data.category = category;
  return data;
};
