'use strict';

const ERROR_CODE = {
    // system
    E0000400: "リクエストパラメーターにエラーがあります。",
    E0000401: "認証に失敗しました。",
    E0000403: "アクセス権がありません。",
    E0000404: "データが存在しませんでした。",
    E0000500: "サーバーでエラーが発生しました。",
    // user
    E0100001: "ユーザー情報でエラーが発生しました。",
    // cm
    E0200001: "CM作成でエラーが発生しました。",
    // resource
    E0300001: "音源素材でエラーが発生しました。",
    // external
    E0400001: "外部連携でエラーが発生しました。",
};

class UMesseError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
    }
    get name() {
        return this.constructor.name;
    }
}

// Middle error handling.
//class PlatformError extends UMesseError { }
class AppError extends UMesseError {
    constructor(statusCode, code, message) {
        super(message);
        this.code = code;
        this.statusCode = statusCode;
    }
}
/// Error Handling. 
class BadRequestError extends AppError {
    constructor(message) {
        super(400, ERROR_CODE.E0000400, message);
    }
}
class NotFoundError extends AppError {
    constructor(message) {
        super(404, ERROR_CODE.E0000404, message);
    }
}
class InternalServerError extends AppError {
    constructor(message) {
        super(500, ERROR_CODE.E0000500, message);
    }
}
class UnhandledError extends InternalServerError { }

module.exports = {
    ERROR_CODE,
    UMesseError,
    AppError,
    BadRequestError,
    NotFoundError,
    InternalServerError,
    UnhandledError
}