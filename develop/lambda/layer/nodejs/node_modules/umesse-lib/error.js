'use strict';

const { warnlog, errorlog } = require("./constants");

const ERROR_CODE = Object.freeze({
    // E 00(機能) 00(区分) 000(詳細)  
    // system E00
    E0000400: "リクエストパラメーターにエラーがあります。",
    E0000401: "認証に失敗しました。",
    E0000403: "アクセス権がありません。",
    E0000404: "データが存在しませんでした。",
    E0000500: "サーバーでエラーが発生しました。",
    // validation
    E0001000: "validation error.",
    E0001001: "required error.",
    E0001002: "properties error.",
    E0001003: "length error.",
    // cm status
    E0002000: "cm status error.",
    // user E01
    E0100000: "ユーザー情報でエラーが発生しました。",
    // cm E02
    E0200000: "CM作成でエラーが発生しました。",
    // resource E03
    E0300000: "音源素材でエラーが発生しました。",
    // external E04
    E0400000: "外部連携でエラーが発生しました。",
});

class UMesseError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
    }
    get name() {
        return this.constructor.name;
    }
}

// Middle error handling.
//class PlatformError extends UMesseError { }
class AppError extends UMesseError {
    constructor(statusCode, code, message) {
        super(message);
        this.code = code;
        this.statusCode = statusCode;
    }
}
/// Error Handling. 
class BadRequestError extends AppError {
    constructor(message) {
        super(400, "E0000400", message);
        warnlog(message);
    }
}
class NotFoundError extends AppError {
    constructor(message) {
        super(404, "E0000404", message);
        warnlog(message);
    }
}
class InternalServerError extends AppError {
    constructor(message) {
        super(500, "E0000500", message);
        errorlog(message);
    }
}
class UnhandledError extends InternalServerError { }

module.exports = {
    ERROR_CODE,
    UMesseError,
    AppError,
    BadRequestError,
    NotFoundError,
    InternalServerError,
    UnhandledError
}