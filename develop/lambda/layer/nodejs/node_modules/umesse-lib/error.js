'use strict';

const ERROR_CODE = Object.freeze({
    // E 00(機能) 00(区分) 000(詳細)  
    // system E00
    E0000400: "リクエストパラメーターにエラーがあります。",
    E0000401: "認証に失敗しました。",
    E0000403: "アクセス権がありません。",
    E0000404: "データが存在しませんでした。",
    E0000500: "サーバーでエラーが発生しました。",
    // validation
    E0001000: "データに不備があります。",
    E0001001: "データが不足しています。",
    E0001010: "顧客CDに不備があります。",
    E0001020: "IDに不備があります。",
    E0001030: "カテゴリーに不備があります。",
    E0001040: "ソートに不備があります。",
    E0001050: "タイトルに不備があります。",
    E0001051: "タイトルに設定できない文字が含まれています。",
    E0001052: "タイトルの最大文字数は200文字までです。",
    E0001060: "説明文に不備があります。",
    E0001061: "説明文に設定できない文字が含まれています。",
    E0001062: "説明文の最大文字数は400文字までです。",
    E0001070: "開始日時に不備があります。",
    E0001080: "終了日時に不備があります。",
    E0001090: "業種CDに不備があります。",
    E0001100: "業種名に不備があります。",
    E0001110: "シーンCDに不備があります。",
    E0001120: "シーン名に不備があります。",
    E0001130: "外部連携システムに不備があります。",
    E0001140: "ファイル名に不備があります。",
    E0001150: "音声データに不備があります。",
    E0001160: "詳細データに不備があります。",
    E0001170: "外部連携パスに不備があります。",
    E0001180: "データプロセスに不備があります。",
    E0001190: "エラーコードに不備があります。",
    E0001200: "エラーメッセージに不備があります。",
    E0001210: "CMIDに不備があります。",
    E0001220: "録音IDに不備があります。",
    E0001230: "合成IDに不備があります。",
    E0001240: "ナレーションに不備があります。",
    E0001250: "ボリューム値に不備があります。",
    E0001260: "テキストに不備があります。",
    E0001261: "テキストに設定できない文字が含まれています。",
    E0001262: "テキストの最大文字数は500文字までです。",
    E0001270: "話者指定に不備があります。",
    E0001280: "言語指定に不備があります。",
    // cm status
    E0002000: "CMステータスが誤っているため更新できません。",

    // user E01
    E0100000: "ユーザー情報でエラーが発生しました。",

    // cm E02
    E0200000: "CM作成でエラーが発生しました。",

    // resource E03
    E0300000: "音源素材でエラーが発生しました。",
    E0300010: "CMの作成で利用されているため、削除できません。CMの利用を解除するか、CMを削除してください。",

    // external E04
    E0400000: "外部連携でエラーが発生しました。",
    E0400010: "既に外部連携データが存在しているため、アップロードできません。しばらくお待ちください。",
});

class UMesseError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
    }
    get name() {
        return this.constructor.name;
    }
}

// Middle error handling.
//class PlatformError extends UMesseError { }
class AppError extends UMesseError {
    constructor(statusCode, code, message) {
        super(message);
        this.code = code;
        this.statusCode = statusCode;
    }
}
/// Error Handling. 
class BadRequestError extends AppError {
    constructor(message) {
        super(400, "E0000400", message);
    }
}
class NotFoundError extends AppError {
    constructor(message) {
        super(404, "E0000404", message);
    }
}
class InternalServerError extends AppError {
    constructor(message) {
        super(500, "E0000500", message);
    }
}
class UnhandledError extends InternalServerError { }

module.exports = {
    ERROR_CODE,
    UMesseError,
    AppError,
    BadRequestError,
    NotFoundError,
    InternalServerError,
    UnhandledError
}