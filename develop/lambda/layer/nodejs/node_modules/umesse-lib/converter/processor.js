'use strict';

const fs = require('fs');
const path = require('path');
const { debuglog, constants } = require('../constants');
const { execSync } = require("child_process");

module.exports = function (proto) {

  // FIXME: 削除したい。windows用のpath解決用に存在している.
  proto.createReadStream = function (input) {
    return fs.createReadStream(input);
  }

  proto.generateCm = async function (unisCustomerCd, cmId, materials, output) {
    const workDir = this.getWorkDir(unisCustomerCd, cmId);
    // Initialized workdir.
    fs.rmSync(workDir, { force: true, recursive: true })
    fs.mkdirSync(workDir, { recursive: true })

    // S3から無音ファイルを取得
    const filePath = this.basePath;
    const fileName = 'silent.mp3';
    if (!fs.existsSync(path.join(filePath, fileName))) {
      if (!(await this.getContents(constants.s3Bucket().contents, fileName, filePath, fileName)))
        throw "getObject failed";
    }

    // build cm generate command .
    let command = await this.buildGenerateCM(unisCustomerCd, cmId, materials, output);
    debuglog(command);

    execSync(command);

    // Check if the file exists
    if (!fs.existsSync(output)) {
      throw 'Cm file is not exists.'
    }
  }
  proto.getDuration = function (input) {
    // CMの秒数を取得
    let command = this.buildGetDuration(input);
    return execSync(command).toString().replace(/\n/g, "");
  }



  // 1. wav変換
  proto.toWav = function (input, output) {
    command = `${this.ffmpeg} -y -i ${input} \
        -ar 44100 -acodec pcm_s16le -ac 2 -map_metadata -1 -flags +bitexact ${output}`;
    debuglog(command);
    execSync(command);
    if (fs.existsSync(output)) {
      return true
    }
    return false
  }

  // 2. ラウドネス値取得
  proto.getLoudnorm = function (input, params) {
    command = `${this.ffmpeg} -i ${input} \
        -af loudnorm=I=${params.I}:LRA=${params.LRA}:tp=${params.tp}:print_format=json -f null - 2>&1 | tail -12`;
    console.log(command);
    res = execSync(command);
    data = JSON.parse(res.toString());
    return data;
  }

  // 3. ラウドネス調整 + 音圧調整
  proto.muasured = function (input, output, data) {
    command = `${this.ffmpeg} -y -i ${input} \
        -af loudnorm=I=-24.0:LRA=+20.0:tp=-2.0:measured_I=${data.input_i}:measured_LRA=${data.input_lra}:measured_tp=${data.input_tp}:measured_thresh=${data.input_thresh}:offset=${data.target_offset},acompressor=threshold=-35dB:ratio=1.7:attack=200,alimiter=limit=-17dB:level=false:level_out=17dB \
        -ar 44100 ${output}`;
    debuglog(command);
    execSync(command);
    if (fs.existsSync(output)) {
      return true
    }
    return false
  }


  // 5. ラウドネス調整 + HE-AACv2化
  proto.measuredLoudnorm = function (input, output, data) {
    command = `${this.ffmpeg} -y -i ${input} \
        -af volume=0dB -acodec libfdk_aac -profile:a aac_he_v2 -ab 48k -ar 48000 -ac 2 ${output}`;
    if (data.input_i > -17.5) {
      command = `${this.ffmpeg} -y -i ${input} \
          -af volume=-${parseFloat(data.input_i) + 17.5
        }dB -acodec libfdk_aac -profile:a aac_he_v2 -ab 48k -ar 48000 -ac 2 ${output}`;
    }
    debuglog(command);
    execSync(command);

    if (fs.existsSync(output)) {
      return true
    }
    return false
  }

}