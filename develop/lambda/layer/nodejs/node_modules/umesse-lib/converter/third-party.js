const fs = require('fs')
const { execSync } = require("child_process");
const ffmpeg = require('fluent-ffmpeg');

module.exports = function (proto) {
  //  ffmpeg.setFfmpegPath('./bin/ffmpeg');
  //  ffmpeg.setFfprobePath('./bin/ffprobe');

  proto.getDuration = function (inputPath) {
    return new Promise((resolve, reject) => {
      ffmpeg(inputPath)
        .ffprobe(0, (err, data) => {
          if (err) return reject(err);
          resolve(data.format.duration)
        });
    })
  }
  proto.generateCm = function (inputs, output) {
    return new Promise((resolve, reject) => {

      let f = ffmpeg();
      f.input(inputs[0]).complexFilter([
        "[0:a]volume=0.5[start_chime]"
      ])
      f.input(inputs[1]).complexFilter([
        "[1:a]volume=0.5,adelay=3s|3s[end_chime]",
      ])
      f.input(inputs[2]).complexFilter([
        "[2:a]volume=0.5,aloop=2:2.14748e+009[bgm]",
      ])
      f.input(inputs[3]).complexFilter([
        "[3:a]volume=3.0,adelay=3s|3s[narration1]",
      ])
      f.input(inputs[4]).complexFilter([
        "[4:a]volume=3.0,adelay=3s|3s[narration2]",
      ])
      f.input(inputs[5]).complexFilter([
        "[5:a]volume=3.0,adelay=3s|3s,apad=pad_dur=5[narration3]",
      ])
      f.complexFilter([
        "[narration1][narration2][narration3]concat=n=3:v=0:a=1[join]",
        "[join][bgm]amix=duration=shortest[mix]",
        "[mix][end_chime]acrossfade=d=3[last]",
        "[start_chime][last]concat=n=2:v=0:a=1",
      ])
        .on('data', (data) => {
          console.log(data);
        })
        .on('end', () => {
          resolve()
        })
        .on('error', function (err) {
          reject(err)
        })
        .save(output);
    });
    /*
    let command = `${this.ffmpeg} ${inputs} \
        -filter_complex ' \
          [0:a]volume=0.5[start_chime]; \
          [1:a]volume=0.5,adelay=3s|3s[end_chime]; \
          [2:a]volume=0.5,aloop=2:2.14748e+009[bgm]; \
          [3:a]volume=3.0,adelay=3s|3s[narration1]; \
          [4:a]volume=3.0,adelay=3s|3s[narration2]; \
          [5:a]volume=3.0,adelay=3s|3s,apad=pad_dur=5[narration3]; \
          [narration1][narration2][narration3]concat=n=3:v=0:a=1[join]; \
          [join][bgm]amix=duration=shortest[mix]; \
          [mix][end_chime]acrossfade=d=3[last]; \
          [start_chime][last]concat=n=2:v=0:a=1 \
        ' -y ${output}`;
    debuglog(command);
    execSync(command);
    if (fs.existsSync(output)) {
      return true
    }
    return false
    */
  }
  // 1. wav変換
  proto.toWav = function (input, output) {
    return new Promise((resolve, reject) => {
      ffmpeg(input)
        .audioCodec('pcm_s16le')
        .audioChannels(2)
        .audioFrequency(44100)
        .addOption('-map_metadata', -1)
        .addOption('-flags', "+bitexact")
        .format('wav')
        .on('data', (data) => {
          console.log(data);
        })
        .on('end', () => {
          resolve()
        })
        .on('error', function (err) {
          reject(err)
        }).save(output);
    });

    // 2. ラウドネス値取得
    //  getLoudnorm(input, { I: "-12.0", LRA: "+10.0", tp="-2.0" })
    proto.getLoudnorm = function (input, params = { I: "-24.0", LRA: "+20.0", tp: "-2.0" }) {
      return new Promise((resolve, reject) => {
        ffmpeg(input)
          .withAudioFilter(`loudnorm=I=${params.I}:LRA=${params.LRA}:tp=${params.tp}:print_format=json`)
          .addOption('-f', 'null')
          .on('end', (stdout, stderr) => {
            try {
              const jsonstr = stderr.substring(stderr.indexOf("{"));
              const data = JSON.parse(jsonstr.toString());
              resolve(data)
            } catch (e) {
              reject(e)
            }
          })
          .on('error', function (err) {
            reject(err)
          }).save('-');
      });
    }

  }

  //
  //
  //
  //      // 1. wav変換
  //      command = `${ffmpeg} -y -i ${workDir}/${cmId}.mp3 \
  //        -ar 44100 -acodec pcm_s16le -ac 2 -map_metadata -1 -flags +bitexact ${workDir}/tmp_1.wav`;
  //      debuglog(command);
  //      execSync(command);
  //
  //      // 2. ラウドネス値取得 (1回目)
  //      command = `${ffmpeg} -i ${workDir}/tmp_1.wav \
  //        -af loudnorm=I=-24.0:LRA=+20.0:tp=-2.0:print_format=json -f null - 2>&1 | tail -12`;
  //      console.log(command);
  //      res = execSync(command);
  //      data = JSON.parse(res.toString());
  //
  //      // 3. ラウドネス調整 + 音圧調整
  //      command = `${ffmpeg} -y -i ${workDir}/tmp_1.wav \
  //        -af loudnorm=I=-24.0:LRA=+20.0:tp=-2.0:measured_I=${data.input_i}:measured_LRA=${data.input_lra}:measured_tp=${data.input_tp}:measured_thresh=${data.input_thresh}:offset=${data.target_offset},acompressor=threshold=-35dB:ratio=1.7:attack=200,alimiter=limit=-17dB:level=false:level_out=17dB \
  //        -ar 44100 ${workDir}/tmp_2.wav`;
  //      debuglog(command);
  //      execSync(command);
  //
  //      // 4. ラウドネス値取得 (2回目)
  //      command = `${ffmpeg} -i ${workDir}/tmp_2.wav \
  //        -af loudnorm=I=-12.0:LRA=+10.0:tp=-2.0:print_format=json -f null - 2>&1 | tail -12`;
  //      debuglog(command);
  //      res = execSync(command);
  //      data = JSON.parse(res.toString());
  //
  //      // 5. ラウドネス調整 + HE-AACv2化
  //      command = `${ffmpeg} -y -i ${workDir}/tmp_2.wav \
  //        -af volume=0dB -acodec libfdk_aac -profile:a aac_he_v2 -ab 48k -ar 48000 -ac 2 ${workDir}/${cmId}.aac`;
  //      if (data.input_i > -17.5) {
  //        command = `${ffmpeg} -y -i ${workDir}/tmp_2.wav \
  //          -af volume=-${
  //            parseFloat(data.input_i) + 17.5
  //          }dB -acodec libfdk_aac -profile:a aac_he_v2 -ab 48k -ar 48000 -ac 2 ${workDir}/${cmId}.aac`;
  //      }
  /*
  const { execSync } = require("child_process");
  const ffmpeg = `./bin/ffmpeg -hide_banner`;
  
  module.exports = function  FfmpegCommand(input,config){
  
  }
  
  */
  //const seconds = execSync(
  //  `${ffmpeg} -hide_banner -i ../sample_data/s3/umesse-contents/bgm/サンプル01.mp3 2>&1 | \
  //          grep 'Duration' | cut -d ' ' -f 4 | cut -d '.' -f 1`
  //)
  //  .toString()
  //  .replace(/\n/g, "");
  //console.log(`seconds: ${seconds}`);
}