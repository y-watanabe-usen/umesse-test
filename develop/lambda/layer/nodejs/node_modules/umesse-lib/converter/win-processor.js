
'use strict';

const fs = require('fs')
const { debuglog } = require('../constants')
const { execSync } = require("child_process");

module.exports = function (proto) {

  function winExecSync(command) {
    fs.writeFileSync(`${this.windowsWorkDir}/ffmped-command`, `#!/bin/bash\n${command}`);
    command = `docker run --name ffmpeg-runner --rm \
          -v ${process.cwd()}\\..\\layer\\bin:/usr/local/bin \
          -v ${this.windowsWorkDir}:${this.workDir} \
          centos:latest \
          sh ${this.workDir}/ffmped-command`;
    return execSync(command);
  }
  proto.init = function () {
    const initDirCommand = `mkdir ${windowsWorkDir} > NUL 2>&1 && \
          if ERRORLEVEL 1 cmd /c exit 0 && \
          rd /q ${windowsWorkDir}\\*`;
    execSync(initDirCommand);
  }
  proto.writeFile = function (filename, data) {
    fs.writeFileSync(`${this.windowsWorkDir}/${key}.mp3`, data);
  }
  proto.readFileStream = function (filename) {
    return fs.createReadStream(`${this.windowsWorkDir}/${filename}`);
  }
  proto.generateCm = async function (inputs, output) {

    let command = `${this.ffmpeg} ${inputs} \
        -filter_complex ' \
          [0:a]volume=0.5[start_chime]; \
          [1:a]volume=0.5,adelay=3s|3s[end_chime]; \
          [2:a]volume=0.5,aloop=2:2.14748e+009[bgm]; \
          [3:a]volume=3.0,adelay=3s|3s[narration1]; \
          [4:a]volume=3.0,adelay=3s|3s[narration2]; \
          [5:a]volume=3.0,adelay=3s|3s,apad=pad_dur=5[narration3]; \
          [narration1][narration2][narration3]concat=n=3:v=0:a=1[join]; \
          [join][bgm]amix=duration=shortest[mix]; \
          [mix][end_chime]acrossfade=d=3[last]; \
          [start_chime][last]concat=n=2:v=0:a=1 \
        ' -y ${output}`;
    debuglog(command);
    winExecSync(command)
  }
  proto.getDuration = function (input) {
    let secondsCommand = `${this.ffmpeg} -hide_banner -i ${input} 2>&1 | \
      grep 'Duration' | cut -d ' ' -f 4 | cut -d '.' -f 1`
    const seconds = winExecSync(secondsCommand)
      .toString()
      .replace(/\n/g, "");
    debuglog(`seconds: ${seconds}`);
    return seconds;

  }

}