
'use strict';

const fs = require('fs')
const path = require('path');
const { debuglog, constants } = require('../constants')
const { execSync } = require("child_process");

module.exports = function (proto) {
  proto.createReadStream = function (filename) {
    let basename = path.basename(filename);
    return fs.createReadStream(`${this.windowsWorkDir}/${basename}`);
  }

  let workDir;

  proto.getWorkDir = function (unisCustomerCd, cmId) {
    // return path.join(this.basePath, unisCustomerCd, 'mix', cmId);
    return `${this.basePath}/${unisCustomerCd}/mix/${cmId}`;
  }

  // windows exec.
  proto.winExecSync = function (command) {
    const silentDir = `${process.cwd()}\\tmp\\umesse\\silent.mp3`;
    fs.writeFileSync(
      `${this.windowsWorkDir}/ffmped-command`,
      `#!/bin/bash\n${command}`
    );
    command = `docker run --name ffmpeg-runner --rm \
          -v ${process.cwd()}\\..\\layer\\bin:/usr/local/bin \
          -v ${this.windowsWorkDir}:${workDir} \
          -v ${silentDir}:/tmp/umesse/silent.mp3 \
          centos:latest \
          sh ${workDir}/ffmped-command`;
    debuglog(command);
    return execSync(command);
  }

  proto.generateCm = async function (unisCustomerCd, cmId, materials, output) {
    output = output.replace(/\\/g, "/");
    workDir = this.getWorkDir(unisCustomerCd, cmId);
    const initDirCommand = `mkdir ${this.windowsWorkDir} > NUL 2>&1 && \
          if ERRORLEVEL 1 cmd /c exit 0 && \
          rd /q ${this.windowsWorkDir}\\*`;
    execSync(initDirCommand);

    // S3から無音ファイルを取得
    let filePath = `${process.cwd()}\\tmp\\umesse`;
    if (!(await this.getContents(constants.s3Bucket().contents, "silent.mp3", filePath, "silent.mp3")))
      throw "getObject failed";

    let command = await this.buildGenerateCM(unisCustomerCd, cmId, materials, output);
    this.winExecSync(command)
  }
  proto.getDuration = function (input) {
    input = input.replace(/\\/g, "/");
    // CMの秒数を取得
    let command = this.buildGetDuration(input);
    return this.winExecSync(command).toString().replace(/\n/g, "");
  }

}