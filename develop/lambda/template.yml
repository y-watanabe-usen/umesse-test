# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  lambda

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 30
    Environment:
      Variables:
        TZ: Asia/Tokyo
  Api:
    Cors:
      AllowMethods: "'GET, POST, PUT, DELETE, OPTIONS'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'*''"

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: UMesseLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  LambdaRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref LambdaRole

  # UMesseApi:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     Name: UMesseApi
  #     StageName: dev
  #     DefinitionUri: swagger.yaml
  #     Variables:
  #       AWSRegion: !Ref AWS::Region

  UMesseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UMesseFunction
      Description: U-Messe function.
      Handler: src/index.handler
      Role: !GetAtt LambdaRole.Arn
      # Policies:
      #   - DynamoDBCrudPolicy:
      #       TableName: !Ref AppTable
      # Environment:
      #   Variables:
      #     APP_TABLE: !Ref AppTable
      Events:
        Api:
          Type: Api
          Properties:
            # RestApiId: !Ref UMesseApi
            Path: /{handler}
            Method: post

  UMesseFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UMesseFunction
      Principal: apigateway.amazonaws.com

  # # S3 bucket
  # UMesseBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: umesse-contents

  # # DynamoDB table
  # UMesseTable:
  #   Type: AWS::Serverless::SimpleTable
  #   Properties:
  #     PrimaryKey:
  #       Name: id
  #       Type: String
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 2
  #       WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/umesse/"
