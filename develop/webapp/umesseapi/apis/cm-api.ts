/* tslint:disable */
/* eslint-disable */
/**
 * U MESSE API
 * U MESSE API
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Body1 } from '../models';
import { Body2 } from '../models';
import { CmItem } from '../models';
/**
 * CmApi - axios parameter creator
 * @export
 */
export const CmApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CM新規結合
         * @param {Body1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserCm: async (body?: Body1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/cm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CM情報削除
         * @param {number} cmId ID of cm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserCm: async (cmId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cmId' is not null or undefined
            if (cmId === null || cmId === undefined) {
                throw new RequiredError('cmId','Required parameter cmId was null or undefined when calling deleteUserCm.');
            }
            const localVarPath = `/user/cm/{cmId}`
                .replace(`{${"cmId"}}`, encodeURIComponent(String(cmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CM情報取得
         * @param {string} cmId ID of cm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCm: async (cmId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cmId' is not null or undefined
            if (cmId === null || cmId === undefined) {
                throw new RequiredError('cmId','Required parameter cmId was null or undefined when calling getUserCm.');
            }
            const localVarPath = `/user/cm/{cmId}`
                .replace(`{${"cmId"}}`, encodeURIComponent(String(cmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CMリスト取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserCm: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/cm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CM情報更新
         * @param {string} cmId ID of cm to return
         * @param {Body2} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserCm: async (cmId: string, body?: Body2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cmId' is not null or undefined
            if (cmId === null || cmId === undefined) {
                throw new RequiredError('cmId','Required parameter cmId was null or undefined when calling updateUserCm.');
            }
            const localVarPath = `/user/cm/{cmId}`
                .replace(`{${"cmId"}}`, encodeURIComponent(String(cmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CmApi - functional programming interface
 * @export
 */
export const CmApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CM新規結合
         * @param {Body1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserCm(body?: Body1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmItem>> {
            const localVarAxiosArgs = await CmApiAxiosParamCreator(configuration).createUserCm(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary CM情報削除
         * @param {number} cmId ID of cm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserCm(cmId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmItem>> {
            const localVarAxiosArgs = await CmApiAxiosParamCreator(configuration).deleteUserCm(cmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary CM情報取得
         * @param {string} cmId ID of cm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCm(cmId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmItem>> {
            const localVarAxiosArgs = await CmApiAxiosParamCreator(configuration).getUserCm(cmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary CMリスト取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserCm(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CmItem>>> {
            const localVarAxiosArgs = await CmApiAxiosParamCreator(configuration).listUserCm(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary CM情報更新
         * @param {string} cmId ID of cm to return
         * @param {Body2} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserCm(cmId: string, body?: Body2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmItem>> {
            const localVarAxiosArgs = await CmApiAxiosParamCreator(configuration).updateUserCm(cmId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CmApi - factory interface
 * @export
 */
export const CmApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary CM新規結合
         * @param {Body1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserCm(body?: Body1, options?: any): AxiosPromise<CmItem> {
            return CmApiFp(configuration).createUserCm(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CM情報削除
         * @param {number} cmId ID of cm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserCm(cmId: number, options?: any): AxiosPromise<CmItem> {
            return CmApiFp(configuration).deleteUserCm(cmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CM情報取得
         * @param {string} cmId ID of cm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCm(cmId: string, options?: any): AxiosPromise<CmItem> {
            return CmApiFp(configuration).getUserCm(cmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CMリスト取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserCm(options?: any): AxiosPromise<Array<CmItem>> {
            return CmApiFp(configuration).listUserCm(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CM情報更新
         * @param {string} cmId ID of cm to return
         * @param {Body2} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserCm(cmId: string, body?: Body2, options?: any): AxiosPromise<CmItem> {
            return CmApiFp(configuration).updateUserCm(cmId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CmApi - object-oriented interface
 * @export
 * @class CmApi
 * @extends {BaseAPI}
 */
export class CmApi extends BaseAPI {
    /**
     * 
     * @summary CM新規結合
     * @param {Body1} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmApi
     */
    public createUserCm(body?: Body1, options?: any) {
        return CmApiFp(this.configuration).createUserCm(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary CM情報削除
     * @param {number} cmId ID of cm to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmApi
     */
    public deleteUserCm(cmId: number, options?: any) {
        return CmApiFp(this.configuration).deleteUserCm(cmId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary CM情報取得
     * @param {string} cmId ID of cm to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmApi
     */
    public getUserCm(cmId: string, options?: any) {
        return CmApiFp(this.configuration).getUserCm(cmId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary CMリスト取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmApi
     */
    public listUserCm(options?: any) {
        return CmApiFp(this.configuration).listUserCm(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary CM情報更新
     * @param {string} cmId ID of cm to return
     * @param {Body2} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmApi
     */
    public updateUserCm(cmId: string, body?: Body2, options?: any) {
        return CmApiFp(this.configuration).updateUserCm(cmId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
