/* tslint:disable */
/* eslint-disable */
/**
 * U MESSE API
 * U MESSE API
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { RecordingItem } from '../models';
/**
 * RecordingApi - axios parameter creator
 * @export
 */
export const RecordingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新規録音データ
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} [filename] 
         * @param {string} [recordedFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserRecording: async (xToken: string, xUnisCustomerCd: string, filename?: string, recordedFile?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling createUserRecording.');
            }
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling createUserRecording.');
            }
            const localVarPath = `/user/recording`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }


            if (filename !== undefined) { 
                localVarFormParams.append('filename', filename as any);
            }

            if (recordedFile !== undefined) { 
                localVarFormParams.append('recordedFile', recordedFile as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 録音データ削除
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} recordingId ID of recording to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRecording: async (xToken: string, xUnisCustomerCd: string, recordingId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling deleteUserRecording.');
            }
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling deleteUserRecording.');
            }
            // verify required parameter 'recordingId' is not null or undefined
            if (recordingId === null || recordingId === undefined) {
                throw new RequiredError('recordingId','Required parameter recordingId was null or undefined when calling deleteUserRecording.');
            }
            const localVarPath = `/user/recording/{recordingId}`
                .replace(`{${"recordingId"}}`, encodeURIComponent(String(recordingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 録音データ取得
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} recordingId ID of recording to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRecording: async (xToken: string, xUnisCustomerCd: string, recordingId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling getUserRecording.');
            }
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling getUserRecording.');
            }
            // verify required parameter 'recordingId' is not null or undefined
            if (recordingId === null || recordingId === undefined) {
                throw new RequiredError('recordingId','Required parameter recordingId was null or undefined when calling getUserRecording.');
            }
            const localVarPath = `/user/recording/{recordingId}`
                .replace(`{${"recordingId"}}`, encodeURIComponent(String(recordingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 録音データリスト取得
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserRecording: async (xToken: string, xUnisCustomerCd: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling listUserRecording.');
            }
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling listUserRecording.');
            }
            const localVarPath = `/user/recording`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 録音データ更新（メタデータのみ）
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} recordingId ID of recording to return
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRecording: async (xToken: string, xUnisCustomerCd: string, recordingId: string, title?: string, description?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling updateUserRecording.');
            }
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling updateUserRecording.');
            }
            // verify required parameter 'recordingId' is not null or undefined
            if (recordingId === null || recordingId === undefined) {
                throw new RequiredError('recordingId','Required parameter recordingId was null or undefined when calling updateUserRecording.');
            }
            const localVarPath = `/user/recording/{recordingId}`
                .replace(`{${"recordingId"}}`, encodeURIComponent(String(recordingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }


            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }

            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecordingApi - functional programming interface
 * @export
 */
export const RecordingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新規録音データ
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} [filename] 
         * @param {string} [recordedFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserRecording(xToken: string, xUnisCustomerCd: string, filename?: string, recordedFile?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecordingItem>>> {
            const localVarAxiosArgs = await RecordingApiAxiosParamCreator(configuration).createUserRecording(xToken, xUnisCustomerCd, filename, recordedFile, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 録音データ削除
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} recordingId ID of recording to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserRecording(xToken: string, xUnisCustomerCd: string, recordingId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await RecordingApiAxiosParamCreator(configuration).deleteUserRecording(xToken, xUnisCustomerCd, recordingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 録音データ取得
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} recordingId ID of recording to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRecording(xToken: string, xUnisCustomerCd: string, recordingId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordingItem>> {
            const localVarAxiosArgs = await RecordingApiAxiosParamCreator(configuration).getUserRecording(xToken, xUnisCustomerCd, recordingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 録音データリスト取得
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserRecording(xToken: string, xUnisCustomerCd: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecordingItem>>> {
            const localVarAxiosArgs = await RecordingApiAxiosParamCreator(configuration).listUserRecording(xToken, xUnisCustomerCd, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 録音データ更新（メタデータのみ）
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} recordingId ID of recording to return
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserRecording(xToken: string, xUnisCustomerCd: string, recordingId: string, title?: string, description?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordingItem>> {
            const localVarAxiosArgs = await RecordingApiAxiosParamCreator(configuration).updateUserRecording(xToken, xUnisCustomerCd, recordingId, title, description, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RecordingApi - factory interface
 * @export
 */
export const RecordingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 新規録音データ
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} [filename] 
         * @param {string} [recordedFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserRecording(xToken: string, xUnisCustomerCd: string, filename?: string, recordedFile?: string, options?: any): AxiosPromise<Array<RecordingItem>> {
            return RecordingApiFp(configuration).createUserRecording(xToken, xUnisCustomerCd, filename, recordedFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 録音データ削除
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} recordingId ID of recording to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRecording(xToken: string, xUnisCustomerCd: string, recordingId: string, options?: any): AxiosPromise<void> {
            return RecordingApiFp(configuration).deleteUserRecording(xToken, xUnisCustomerCd, recordingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 録音データ取得
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} recordingId ID of recording to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRecording(xToken: string, xUnisCustomerCd: string, recordingId: string, options?: any): AxiosPromise<RecordingItem> {
            return RecordingApiFp(configuration).getUserRecording(xToken, xUnisCustomerCd, recordingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 録音データリスト取得
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserRecording(xToken: string, xUnisCustomerCd: string, options?: any): AxiosPromise<Array<RecordingItem>> {
            return RecordingApiFp(configuration).listUserRecording(xToken, xUnisCustomerCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 録音データ更新（メタデータのみ）
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} recordingId ID of recording to return
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRecording(xToken: string, xUnisCustomerCd: string, recordingId: string, title?: string, description?: string, options?: any): AxiosPromise<RecordingItem> {
            return RecordingApiFp(configuration).updateUserRecording(xToken, xUnisCustomerCd, recordingId, title, description, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecordingApi - object-oriented interface
 * @export
 * @class RecordingApi
 * @extends {BaseAPI}
 */
export class RecordingApi extends BaseAPI {
    /**
     * 
     * @summary 新規録音データ
     * @param {string} xToken ID of token to return
     * @param {string} xUnisCustomerCd ID of unis customer cd to return
     * @param {string} [filename] 
     * @param {string} [recordedFile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordingApi
     */
    public createUserRecording(xToken: string, xUnisCustomerCd: string, filename?: string, recordedFile?: string, options?: any) {
        return RecordingApiFp(this.configuration).createUserRecording(xToken, xUnisCustomerCd, filename, recordedFile, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 録音データ削除
     * @param {string} xToken ID of token to return
     * @param {string} xUnisCustomerCd ID of unis customer cd to return
     * @param {string} recordingId ID of recording to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordingApi
     */
    public deleteUserRecording(xToken: string, xUnisCustomerCd: string, recordingId: string, options?: any) {
        return RecordingApiFp(this.configuration).deleteUserRecording(xToken, xUnisCustomerCd, recordingId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 録音データ取得
     * @param {string} xToken ID of token to return
     * @param {string} xUnisCustomerCd ID of unis customer cd to return
     * @param {string} recordingId ID of recording to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordingApi
     */
    public getUserRecording(xToken: string, xUnisCustomerCd: string, recordingId: string, options?: any) {
        return RecordingApiFp(this.configuration).getUserRecording(xToken, xUnisCustomerCd, recordingId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 録音データリスト取得
     * @param {string} xToken ID of token to return
     * @param {string} xUnisCustomerCd ID of unis customer cd to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordingApi
     */
    public listUserRecording(xToken: string, xUnisCustomerCd: string, options?: any) {
        return RecordingApiFp(this.configuration).listUserRecording(xToken, xUnisCustomerCd, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 録音データ更新（メタデータのみ）
     * @param {string} xToken ID of token to return
     * @param {string} xUnisCustomerCd ID of unis customer cd to return
     * @param {string} recordingId ID of recording to return
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordingApi
     */
    public updateUserRecording(xToken: string, xUnisCustomerCd: string, recordingId: string, title?: string, description?: string, options?: any) {
        return RecordingApiFp(this.configuration).updateUserRecording(xToken, xUnisCustomerCd, recordingId, title, description, options).then((request) => request(this.axios, this.basePath));
    }
}
