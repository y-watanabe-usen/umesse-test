/* tslint:disable */
/* eslint-disable */
/**
 * U MESSE API
 * U MESSE API
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CmItem } from '../models';
/**
 * ShareApi - axios parameter creator
 * @export
 */
export const ShareApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * CMを共有する
         * @summary CM共有追加
         * @param {string} id CM ID
         * @param {string} xUnisCustomerCd UNIS顧客CD
         * @param {string} xToken トークンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShareCm: async (id: string, xUnisCustomerCd: string, xToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createShareCm.');
            }
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling createShareCm.');
            }
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling createShareCm.');
            }
            const localVarPath = `/share/cm/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * CMの共有を解除する
         * @summary CM共有削除
         * @param {string} id CM ID
         * @param {string} xUnisCustomerCd UNIS顧客CD
         * @param {string} xToken トークンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShareCm: async (id: string, xUnisCustomerCd: string, xToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteShareCm.');
            }
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling deleteShareCm.');
            }
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling deleteShareCm.');
            }
            const localVarPath = `/share/cm/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 共有CMの情報を取得
         * @summary 共有CM取得
         * @param {string} id CM ID
         * @param {string} xUnisCustomerCd UNIS顧客CD
         * @param {string} xToken トークンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShareCm: async (id: string, xUnisCustomerCd: string, xToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getShareCm.');
            }
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling getShareCm.');
            }
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling getShareCm.');
            }
            const localVarPath = `/share/cm/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 共有CMの情報を一覧で取得する
         * @summary 共有CM一覧取得
         * @param {string} xUnisCustomerCd UNIS顧客CD
         * @param {string} xToken トークンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShareCm: async (xUnisCustomerCd: string, xToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling listShareCm.');
            }
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling listShareCm.');
            }
            const localVarPath = `/share/cm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShareApi - functional programming interface
 * @export
 */
export const ShareApiFp = function(configuration?: Configuration) {
    return {
        /**
         * CMを共有する
         * @summary CM共有追加
         * @param {string} id CM ID
         * @param {string} xUnisCustomerCd UNIS顧客CD
         * @param {string} xToken トークンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShareCm(id: string, xUnisCustomerCd: string, xToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmItem>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).createShareCm(id, xUnisCustomerCd, xToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * CMの共有を解除する
         * @summary CM共有削除
         * @param {string} id CM ID
         * @param {string} xUnisCustomerCd UNIS顧客CD
         * @param {string} xToken トークンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShareCm(id: string, xUnisCustomerCd: string, xToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmItem>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).deleteShareCm(id, xUnisCustomerCd, xToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 共有CMの情報を取得
         * @summary 共有CM取得
         * @param {string} id CM ID
         * @param {string} xUnisCustomerCd UNIS顧客CD
         * @param {string} xToken トークンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShareCm(id: string, xUnisCustomerCd: string, xToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmItem>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).getShareCm(id, xUnisCustomerCd, xToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 共有CMの情報を一覧で取得する
         * @summary 共有CM一覧取得
         * @param {string} xUnisCustomerCd UNIS顧客CD
         * @param {string} xToken トークンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShareCm(xUnisCustomerCd: string, xToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CmItem>>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).listShareCm(xUnisCustomerCd, xToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ShareApi - factory interface
 * @export
 */
export const ShareApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * CMを共有する
         * @summary CM共有追加
         * @param {string} id CM ID
         * @param {string} xUnisCustomerCd UNIS顧客CD
         * @param {string} xToken トークンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShareCm(id: string, xUnisCustomerCd: string, xToken: string, options?: any): AxiosPromise<CmItem> {
            return ShareApiFp(configuration).createShareCm(id, xUnisCustomerCd, xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * CMの共有を解除する
         * @summary CM共有削除
         * @param {string} id CM ID
         * @param {string} xUnisCustomerCd UNIS顧客CD
         * @param {string} xToken トークンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShareCm(id: string, xUnisCustomerCd: string, xToken: string, options?: any): AxiosPromise<CmItem> {
            return ShareApiFp(configuration).deleteShareCm(id, xUnisCustomerCd, xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 共有CMの情報を取得
         * @summary 共有CM取得
         * @param {string} id CM ID
         * @param {string} xUnisCustomerCd UNIS顧客CD
         * @param {string} xToken トークンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShareCm(id: string, xUnisCustomerCd: string, xToken: string, options?: any): AxiosPromise<CmItem> {
            return ShareApiFp(configuration).getShareCm(id, xUnisCustomerCd, xToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 共有CMの情報を一覧で取得する
         * @summary 共有CM一覧取得
         * @param {string} xUnisCustomerCd UNIS顧客CD
         * @param {string} xToken トークンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShareCm(xUnisCustomerCd: string, xToken: string, options?: any): AxiosPromise<Array<CmItem>> {
            return ShareApiFp(configuration).listShareCm(xUnisCustomerCd, xToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShareApi - object-oriented interface
 * @export
 * @class ShareApi
 * @extends {BaseAPI}
 */
export class ShareApi extends BaseAPI {
    /**
     * CMを共有する
     * @summary CM共有追加
     * @param {string} id CM ID
     * @param {string} xUnisCustomerCd UNIS顧客CD
     * @param {string} xToken トークンID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public createShareCm(id: string, xUnisCustomerCd: string, xToken: string, options?: any) {
        return ShareApiFp(this.configuration).createShareCm(id, xUnisCustomerCd, xToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * CMの共有を解除する
     * @summary CM共有削除
     * @param {string} id CM ID
     * @param {string} xUnisCustomerCd UNIS顧客CD
     * @param {string} xToken トークンID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public deleteShareCm(id: string, xUnisCustomerCd: string, xToken: string, options?: any) {
        return ShareApiFp(this.configuration).deleteShareCm(id, xUnisCustomerCd, xToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 共有CMの情報を取得
     * @summary 共有CM取得
     * @param {string} id CM ID
     * @param {string} xUnisCustomerCd UNIS顧客CD
     * @param {string} xToken トークンID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public getShareCm(id: string, xUnisCustomerCd: string, xToken: string, options?: any) {
        return ShareApiFp(this.configuration).getShareCm(id, xUnisCustomerCd, xToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 共有CMの情報を一覧で取得する
     * @summary 共有CM一覧取得
     * @param {string} xUnisCustomerCd UNIS顧客CD
     * @param {string} xToken トークンID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public listShareCm(xUnisCustomerCd: string, xToken: string, options?: any) {
        return ShareApiFp(this.configuration).listShareCm(xUnisCustomerCd, xToken, options).then((request) => request(this.axios, this.basePath));
    }
}
