/* tslint:disable */
/* eslint-disable */
/**
 * U MESSE API
 * U MESSE API
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BgmItem } from '../models';
import { ChimeItem } from '../models';
import { NarrationItem } from '../models';
import { WordItem } from '../models';
/**
 * ResourcesApi - axios parameter creator
 * @export
 */
export const ResourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary BGM
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} [industryId] ID of bgm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBgm: async (xToken: string, xUnisCustomerCd: string, industryId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling listBgm.');
            }
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling listBgm.');
            }
            const localVarPath = `/bgm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (industryId !== undefined) {
                localVarQueryParameter['industryId'] = industryId;
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Open/Endチャイム
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChime: async (xToken: string, xUnisCustomerCd: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling listChime.');
            }
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling listChime.');
            }
            const localVarPath = `/chime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ナレーション
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} [industryId] ID of bgm to return
         * @param {string} [sceneId] ID of bgm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNarration: async (xToken: string, xUnisCustomerCd: string, industryId?: string, sceneId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling listNarration.');
            }
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling listNarration.');
            }
            const localVarPath = `/narration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (industryId !== undefined) {
                localVarQueryParameter['industryId'] = industryId;
            }

            if (sceneId !== undefined) {
                localVarQueryParameter['sceneId'] = sceneId;
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary TTSテンプレート一覧
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} [industryId] ID of bgm to return
         * @param {string} [sceneId] ID of bgm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTts: async (xToken: string, xUnisCustomerCd: string, industryId?: string, sceneId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xToken' is not null or undefined
            if (xToken === null || xToken === undefined) {
                throw new RequiredError('xToken','Required parameter xToken was null or undefined when calling listTts.');
            }
            // verify required parameter 'xUnisCustomerCd' is not null or undefined
            if (xUnisCustomerCd === null || xUnisCustomerCd === undefined) {
                throw new RequiredError('xUnisCustomerCd','Required parameter xUnisCustomerCd was null or undefined when calling listTts.');
            }
            const localVarPath = `/tts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (industryId !== undefined) {
                localVarQueryParameter['industryId'] = industryId;
            }

            if (sceneId !== undefined) {
                localVarQueryParameter['sceneId'] = sceneId;
            }

            if (xToken !== undefined && xToken !== null) {
                localVarHeaderParameter['x-token'] = String(xToken);
            }

            if (xUnisCustomerCd !== undefined && xUnisCustomerCd !== null) {
                localVarHeaderParameter['x-unis-customer-cd'] = String(xUnisCustomerCd);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourcesApi - functional programming interface
 * @export
 */
export const ResourcesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary BGM
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} [industryId] ID of bgm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBgm(xToken: string, xUnisCustomerCd: string, industryId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BgmItem>>> {
            const localVarAxiosArgs = await ResourcesApiAxiosParamCreator(configuration).listBgm(xToken, xUnisCustomerCd, industryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Open/Endチャイム
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listChime(xToken: string, xUnisCustomerCd: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChimeItem>>> {
            const localVarAxiosArgs = await ResourcesApiAxiosParamCreator(configuration).listChime(xToken, xUnisCustomerCd, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ナレーション
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} [industryId] ID of bgm to return
         * @param {string} [sceneId] ID of bgm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNarration(xToken: string, xUnisCustomerCd: string, industryId?: string, sceneId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NarrationItem>>> {
            const localVarAxiosArgs = await ResourcesApiAxiosParamCreator(configuration).listNarration(xToken, xUnisCustomerCd, industryId, sceneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary TTSテンプレート一覧
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} [industryId] ID of bgm to return
         * @param {string} [sceneId] ID of bgm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTts(xToken: string, xUnisCustomerCd: string, industryId?: string, sceneId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WordItem>>> {
            const localVarAxiosArgs = await ResourcesApiAxiosParamCreator(configuration).listTts(xToken, xUnisCustomerCd, industryId, sceneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourcesApi - factory interface
 * @export
 */
export const ResourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary BGM
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} [industryId] ID of bgm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBgm(xToken: string, xUnisCustomerCd: string, industryId?: string, options?: any): AxiosPromise<Array<BgmItem>> {
            return ResourcesApiFp(configuration).listBgm(xToken, xUnisCustomerCd, industryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Open/Endチャイム
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChime(xToken: string, xUnisCustomerCd: string, options?: any): AxiosPromise<Array<ChimeItem>> {
            return ResourcesApiFp(configuration).listChime(xToken, xUnisCustomerCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ナレーション
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} [industryId] ID of bgm to return
         * @param {string} [sceneId] ID of bgm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNarration(xToken: string, xUnisCustomerCd: string, industryId?: string, sceneId?: string, options?: any): AxiosPromise<Array<NarrationItem>> {
            return ResourcesApiFp(configuration).listNarration(xToken, xUnisCustomerCd, industryId, sceneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary TTSテンプレート一覧
         * @param {string} xToken ID of token to return
         * @param {string} xUnisCustomerCd ID of unis customer cd to return
         * @param {string} [industryId] ID of bgm to return
         * @param {string} [sceneId] ID of bgm to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTts(xToken: string, xUnisCustomerCd: string, industryId?: string, sceneId?: string, options?: any): AxiosPromise<Array<WordItem>> {
            return ResourcesApiFp(configuration).listTts(xToken, xUnisCustomerCd, industryId, sceneId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResourcesApi - object-oriented interface
 * @export
 * @class ResourcesApi
 * @extends {BaseAPI}
 */
export class ResourcesApi extends BaseAPI {
    /**
     * 
     * @summary BGM
     * @param {string} xToken ID of token to return
     * @param {string} xUnisCustomerCd ID of unis customer cd to return
     * @param {string} [industryId] ID of bgm to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public listBgm(xToken: string, xUnisCustomerCd: string, industryId?: string, options?: any) {
        return ResourcesApiFp(this.configuration).listBgm(xToken, xUnisCustomerCd, industryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Open/Endチャイム
     * @param {string} xToken ID of token to return
     * @param {string} xUnisCustomerCd ID of unis customer cd to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public listChime(xToken: string, xUnisCustomerCd: string, options?: any) {
        return ResourcesApiFp(this.configuration).listChime(xToken, xUnisCustomerCd, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ナレーション
     * @param {string} xToken ID of token to return
     * @param {string} xUnisCustomerCd ID of unis customer cd to return
     * @param {string} [industryId] ID of bgm to return
     * @param {string} [sceneId] ID of bgm to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public listNarration(xToken: string, xUnisCustomerCd: string, industryId?: string, sceneId?: string, options?: any) {
        return ResourcesApiFp(this.configuration).listNarration(xToken, xUnisCustomerCd, industryId, sceneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary TTSテンプレート一覧
     * @param {string} xToken ID of token to return
     * @param {string} xUnisCustomerCd ID of unis customer cd to return
     * @param {string} [industryId] ID of bgm to return
     * @param {string} [sceneId] ID of bgm to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public listTts(xToken: string, xUnisCustomerCd: string, industryId?: string, sceneId?: string, options?: any) {
        return ResourcesApiFp(this.configuration).listTts(xToken, xUnisCustomerCd, industryId, sceneId, options).then((request) => request(this.axios, this.basePath));
    }
}
