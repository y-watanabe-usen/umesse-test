@startuml s2-4

participant WebApp order 1
participant Lambda order 2
participant DynamoDB order 3
participant S3 order 4
participant SQS order 5
skinparam ParticipantPadding 50
autonumber

title ** 2-4 CMセンター追加・変更・解除 **

== CMセンター追加 ==
WebApp --> Lambda: CM作成完了（センター連携）
Lambda --> DynamoDB: データ更新（CMメタデータ）
note right
{
  id: {S, 'ファイル名'},
  title: {S, 'タイトル名'},
  description: {S, '説明文'},
  seconds: {I, '秒数'},
  start_date: {S, '2014-10-10T13:50:40+09:00'},
  end_date: {S, '9999-12-31T23:59:59+09:00'},
  production_type: {S, '01: 音楽系, 02: 素ナレ'},
  industry: {S: '業種名'},
  scene: {S: 'シーン名'},
  materials: {
    narrations: [
      {
        id: {S, 'ファイル名'},
        volume: {I, 'ボリューム値'},
      }
    ],
    start_chime: {
      id: {S, 'ファイル名'},
      volume: {I, 'ボリューム値'},
    },
    end_chime: {
      id: {S, 'ファイル名'},
      volume: {I, 'ボリューム値'},
    },
    bgm: {
      id: {S, 'ファイル名'},
      volume: {I, 'ボリューム値'},
    },
  },
  status: {S: '01: CM作成中'}
  timestamp: {S, '2014-10-10T13:50:40+09:00'}
}
end note
Lambda <-- DynamoDB: レスポンス
Lambda --> DynamoDB: データ追加（センター連携用）
note right
{
  unis_customer_cd: {S, '顧客CD'},
  data_process_type: {S, '01: 追加, 02: 変更, 03: 削除'}
  id: {S, 'ファイル名'},
  title: {S, 'タイトル名'},
  description: {S, '説明文'},
  seconds: {I, '秒数'},
  start_date: {S, '2014-10-10T13:50:40+09:00'},
  end_date: {S, '9999-12-31T23:59:59+09:00'},
  production_type: {S, '01: 音楽系, 02: 素ナレ'},
  industry: {S: '業種名'},
  scene: {S: 'シーン名'},
  status: {I, '0: 連携準備中}
  timestamp: {S, '2014-10-10T13:50:40+09:00'}
}
end note
Lambda <-- DynamoDB: レスポンス
Lambda --> SQS: キュー（センター連携）
Lambda <-- SQS: レスポンス
WebApp <-- Lambda: レスポンス
== 音源加工 ==
Lambda <-- SQS: キュー（センター連携）
Lambda --> S3: 該当ファイル取得(getObject)
Lambda <-- S3: ファイル取得
Lambda --> Lambda: ffmpeg 音源加工
Lambda --> S3: ファイルPUT(putObject)
Lambda <-- S3: レスポンス
Lambda --> DynamoDB: データ更新（CMメタデータ）
note right
{
  id: {S, 'ファイル名'},
  status: {S: '11: センターアップロード中'}
  timestamp: {S, '2014-10-10T13:50:40+09:00'}
}
end note
Lambda <-- DynamoDB: レスポンス
Lambda --> DynamoDB: データ追加（センター連携用）
note right
{
  unis_customer_cd: {S, '顧客CD'},
  id: {S, 'ファイル名'},
  status: {I, '1: 可能}
  timestamp: {S, '2014-10-10T13:50:40+09:00'}
}
end note
Lambda <-- DynamoDB: レスポンス

== CMセンター変更 ==
WebApp --> Lambda: CM変更完了（タイトル・説明文のみ）
Lambda --> DynamoDB: データ更新（CMメタデータ）
note right
{
  id: {S, 'ファイル名'},
  title: {S, 'タイトル名'},
  description: {S, '説明文'},
  status: {S: '11: センターアップロード中'}
  timestamp: {S, '2014-10-10T13:50:40+09:00'}
}
end note
Lambda <-- DynamoDB: レスポンス
Lambda --> DynamoDB: データ追加（センター連携用）
note right
{
  unis_customer_cd: {S, '顧客CD'},
  data_process_type: {S, '02: 変更'}
  id: {S, 'ファイル名'},
  title: {S, 'タイトル名'},
  description: {S, '説明文'},
  status: {I, '1: 連携可能}
  timestamp: {S, '2014-10-10T13:50:40+09:00'}
}
end note
WebApp <-- Lambda: レスポンス

== CMセンター解除 ==
WebApp --> Lambda: CM解除完了
Lambda --> DynamoDB: データ更新（CMメタデータ）
note right
{
  id: {S, 'ファイル名'},
  end_date: {S, '9999-12-31T23:59:59+09:00'},
  status: {S: '11: センターアップロード中'}
  time_stamp: {S, '2014-10-10T13:50:40+09:00'}
}
end note
Lambda <-- DynamoDB: レスポンス
Lambda --> DynamoDB: データ追加（センター連携用）
note right
{
  unis_customer_cd: {S, '顧客CD'},
  data_process_type: {S, '03: 削除'}
  id: {S, 'ファイル名'},
  status: {I, '1: 連携可能}
  timestamp: {S, '2014-10-10T13:50:40+09:00'}
}
end note
WebApp <-- Lambda: レスポンス

@enduml